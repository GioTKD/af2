{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\giova\\\\OneDrive\\\\Desktop\\\\tirocinio\\\\prova\\\\frontEnd\\\\src\\\\Pages\\\\Myprinters\\\\MyPrinters.js\",\n    _s2 = $RefreshSig$();\n\nimport { UserNav } from \"../../component/Navbar/homeNav\";\nimport './Myprinters.css';\nimport { useNavigate } from \"react-router-dom\";\nimport { useEffect } from \"react\";\nimport { useState } from \"react\";\nimport OnBoarding from \"../../SmartContracts/OnBoarding/OnBoarding\";\nimport { arrayify } from \"ethers/lib/utils\";\nimport { experimental_sx } from \"@mui/material\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function MyPrinters() {\n  _s2();\n\n  var _s = $RefreshSig$();\n\n  const [printers, setPrinters] = useState([]);\n  const navigate = useNavigate();\n  const [printerName, SetPrinterName] = useState();\n  const [printerTemp, setPrinterTemp] = useState();\n  const [PrintersList, SetPrintersList] = useState([]);\n  const [TakeId, SetTakeId] = useState(\"\");\n  const {\n    id\n  } = LoadPrinterMaker();\n\n  async function LoadPrinterMaker() {\n    _s();\n\n    const onboarding = new OnBoarding();\n    var printer = await onboarding.getPrinter(index);\n    let nome = printer.name[0];\n\n    for (index = 0; index < printer.lenght; i++) {\n      if (printer.name[index] == printer.name) return index;\n      return printer[index];\n    }\n\n    useEffect(() => {\n      //console.log(TakeId)\n      console.log(LoadPrinterMaker());\n    }, []);\n    let result = \"\";\n\n    async function getPrinters() {\n      const onboarding = new OnBoarding();\n      var printer = await onboarding.getPrinters();\n      console.log(\"ciao\");\n      printer.forEach((value, key) => {\n        result = /*#__PURE__*/_jsxDEV(\"tr\", {\n          onClick: () => navigate(\"/Modify/:id\", {\n            id\n          }),\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            onClick: () => SetTakeId(value.name),\n            children: value.name\n          }, value.name, false, {\n            fileName: _jsxFileName,\n            lineNumber: 45,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: value.volume\n          }, value.volume + \"volume\", false, {\n            fileName: _jsxFileName,\n            lineNumber: 46,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: value.maxPrintTemperature\n          }, value.maxPrintTemperature + \"temp\", false, {\n            fileName: _jsxFileName,\n            lineNumber: 47,\n            columnNumber: 25\n          }, this)]\n        }, key, true, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 13\n        }, this);\n        {\n          console.log(printer);\n        }\n      });\n      /*const PrintersList = printer.map(printer=>{\r\n          <p><h3>PRINTER</h3><br />Nome: <br />{printer.name}<br />Address : {printer.printerAddress}<br /> Materiali supportati: {printer.supportedMaterial}<br />nozzles : {printer.nozzles}<br />nozzlesMounted : {printer.mountedNozzles}<br />printTemperature : {printer.maxPrintTemperature}<br />maxBedTemperature: {printer.maxBedTemperature}<br />nozzles : {printer.nozzles}<br />Soluble :{printer.soluble}<br />Supported Material: {printer.supportedMaterial}<br />Volume : {printer.volume}</p>\r\n      })*/\n\n      SetPrintersList(result);\n      await onboarding.getPrinter();\n    }\n\n    useEffect(() => {\n      getPrinters();\n      LoadPrinterMaker();\n    }, []);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(UserNav, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 14\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"printerTable\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"My printers\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n          className: \"myPrinters\",\n          children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: [/*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Name\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 73,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"NozzlesMounted\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 74,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Soluble\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 75,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 72,\n              columnNumber: 17\n            }, this), PrintersList]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 9\n    }, this);\n  }\n\n  _s(LoadPrinterMaker, \"3ubReDTFssvu4DHeldAg55cW/CI=\");\n}\n\n_s2(MyPrinters, \"n3gmnNawJ/2/OkZ84ry80OACqjI=\", false, function () {\n  return [useNavigate];\n});\n\n_c = MyPrinters;\n\nvar _c;\n\n$RefreshReg$(_c, \"MyPrinters\");","map":{"version":3,"sources":["C:/Users/giova/OneDrive/Desktop/tirocinio/prova/frontEnd/src/Pages/Myprinters/MyPrinters.js"],"names":["UserNav","useNavigate","useEffect","useState","OnBoarding","arrayify","experimental_sx","MyPrinters","printers","setPrinters","navigate","printerName","SetPrinterName","printerTemp","setPrinterTemp","PrintersList","SetPrintersList","TakeId","SetTakeId","id","LoadPrinterMaker","onboarding","printer","getPrinter","index","nome","name","lenght","i","console","log","result","getPrinters","forEach","value","key","volume","maxPrintTemperature"],"mappings":"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","sourcesContent":["import { UserNav } from \"../../component/Navbar/homeNav\"\r\nimport './Myprinters.css'\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { useEffect} from \"react\";\r\nimport { useState } from \"react\";\r\nimport OnBoarding from \"../../SmartContracts/OnBoarding/OnBoarding\";\r\nimport { arrayify } from \"ethers/lib/utils\";\r\nimport { experimental_sx } from \"@mui/material\";\r\n\r\nexport default function MyPrinters(){\r\n\r\n    const [printers,setPrinters] = useState([])\r\n    const navigate=useNavigate();\r\n    const[printerName,SetPrinterName] = useState();\r\n    const[printerTemp,setPrinterTemp] = useState();  \r\n    const [PrintersList,SetPrintersList] = useState([]); \r\n    const [TakeId,SetTakeId] = useState(\"\")\r\n    const { id } = LoadPrinterMaker();\r\n\r\n    async function LoadPrinterMaker(){\r\n        const onboarding = new OnBoarding();\r\n        var printer = await onboarding.getPrinter(index);\r\n        let nome = printer.name[0]\r\n        for(index =0;index < printer.lenght; i++){\r\n            if(printer.name[index] == printer.name)\r\n            return index\r\n        return printer[index];\r\n    }\r\n\r\n    useEffect(()=>{\r\n        //console.log(TakeId)\r\n        console.log(LoadPrinterMaker());\r\n    },[])\r\n\r\n\r\n    let result = \"\";\r\n\r\n        async function getPrinters(){\r\n        const onboarding = new OnBoarding();\r\n        var printer = await onboarding.getPrinters();\r\n        console.log(\"ciao\")\r\n        printer.forEach((value,key)=>{\r\n            result =\r\n            <tr key={key} onClick={()=>navigate(\"/Modify/:id\",{ id })}>\r\n                        <td key={value.name} onClick={()=> SetTakeId(value.name)}>{value.name}</td>\r\n                        <td key={value.volume+\"volume\"}>{value.volume}</td>\r\n                        <td key={value.maxPrintTemperature+ \"temp\"}>{value.maxPrintTemperature}</td>\r\n            </tr>\r\n            {console.log(printer)}\r\n        })\r\n        /*const PrintersList = printer.map(printer=>{\r\n            <p><h3>PRINTER</h3><br />Nome: <br />{printer.name}<br />Address : {printer.printerAddress}<br /> Materiali supportati: {printer.supportedMaterial}<br />nozzles : {printer.nozzles}<br />nozzlesMounted : {printer.mountedNozzles}<br />printTemperature : {printer.maxPrintTemperature}<br />maxBedTemperature: {printer.maxBedTemperature}<br />nozzles : {printer.nozzles}<br />Soluble :{printer.soluble}<br />Supported Material: {printer.supportedMaterial}<br />Volume : {printer.volume}</p>\r\n       })*/\r\n       SetPrintersList(result);\r\n       await onboarding.getPrinter();\r\n    }\r\n\r\n    useEffect(()=>{\r\n     getPrinters();\r\n     LoadPrinterMaker();\r\n        },[])\r\n\r\n    return(\r\n        <div>\r\n             <UserNav/>\r\n            <div className=\"printerTable\">\r\n            <h1>My printers</h1>\r\n            \r\n            <table className=\"myPrinters\">\r\n                \r\n                <tbody>\r\n                <tr>\r\n                    <th>Name</th>\r\n                    <th>NozzlesMounted</th>\r\n                    <th>Soluble</th>\r\n                </tr>     \r\n            {PrintersList}\r\n            </tbody>\r\n            </table>\r\n            </div>\r\n            \r\n        </div>\r\n    )\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}