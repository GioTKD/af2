{"ast":null,"code":"import Web3Istance from \"../Web3\";\nimport OnBoardingABI from '../../ABIs/OnBoarding.json';\nimport { ethers } from \"ethers\";\nexport default class OnBoarding extends Web3Istance {\n  constructor() {\n    super();\n    let ABIScheduling = OnBoardingABI.abi;\n    let ContractNetworks = OnBoardingABI.networks;\n    let contractAddress = ContractNetworks[Object.keys(ContractNetworks)[Object.keys(ContractNetworks).length - 1]].address;\n    this.contract = new this.web3.eth.Contract(ABIScheduling, contractAddress); //console.log(`Indirizzo Contratto ----- `+ contractAddress);  \n  } //address,name,materialSupported,nozzles,mountedNozzles,printTemp,bedTemp,volume,soluble,foodSafety\n\n\n  async addPrinter(printerInfo) {\n    let account = await this.checkIfWalletIsConnected();\n    await this.contract.methods.addPrinter(printerInfo.address, this.utils.fromAscii(printerInfo.name), printerInfo.materiale, [0, 1, 2], parseInt(printerInfo.nozzles), parseInt(printerInfo.printTemp), parseInt(printerInfo.BedTemp), parseInt(printerInfo.volume), printerInfo.soluble, printerInfo.FoodSafety).send({\n      from: account,\n      gas: 4600000\n    });\n  }\n\n  async getPrinters() {\n    let account = await this.checkIfWalletIsConnected();\n    let result = await this.contract.methods.getMakerPrinters().call({\n      from: account\n    });\n    console.log(account);\n    console.log(result);\n    return result;\n  }\n\n  async RemovePrinter(index) {\n    let account = await this.checkIfWalletIsConnected();\n    await this.contract.methods.RemovePrinter(index).send({\n      from: account\n    });\n  }\n\n  async getPrinter(index) {\n    let account = await this.checkIfWalletIsConnected();\n    let result = await this.contract.methods.getMakerPrinter(index).call({\n      from: account\n    });\n    return result;\n  }\n\n  async addMaterial(material) {\n    let account = await this.checkIfWalletIsConnected();\n    console.log(account);\n    let result = await this.contract.methods.addMaterials(this.utils.asciiToHex(material.name), material.materiale, material.colors, material.quantityKG, material.printTemp, material.bedTemp).send({\n      from: account,\n      gas: 4600000\n    });\n    console.log(result);\n  }\n\n  async ModifyPrinter(index, printerData) {\n    let account = await this.checkIfWalletIsConnected();\n    let printer = await this.contract.methods.ModifyPrinter(index, printerData.Soluble, printerData.foodSafety, parseInt(printerData.mountedNozzles)).send({\n      from: account\n    });\n    return printer;\n  }\n\n  async updateMaterial(name, type, color, quantityKG, printTemp, bedTemp) {\n    let account = await this.checkIfWalletIsConnected();\n    await this.contract.methods.updateMaterial(this.utils.asciiToHex(name), type, color, quantityKG, printTemp, bedTemp).send({\n      from: account\n    });\n  }\n\n  async removeMaterial(name, type) {\n    let account = await this.checkIfWalletIsConnected();\n    console.log(this.utils.toUtf8(name));\n    await this.contract.methods.removeMaterial(name, type).send({\n      from: account,\n      gas: 4600000\n    });\n  }\n\n  async mountMaterial(name, type, printer) {\n    let account = await this.checkIfWalletIsConnected();\n    let res = await this.contract.methods.mountMaterial(this.web3.utils.fromAscii(name), type, printer).send({\n      from: account,\n      gas: 4600000\n    });\n    console.log(res);\n    return res;\n  }\n\n  async getMaterials() {\n    let account = await this.checkIfWalletIsConnected();\n    let result = await this.contract.methods.getMaterials().call({\n      from: account\n    });\n    console.log(account);\n    console.log(result);\n    return result;\n  }\n\n  async getMaterial(name, type) {\n    let account = await this.checkIfWalletIsConnected();\n    let result = await this.contract.methods.getMaterial(name, type).call({\n      from: account\n    });\n    return result;\n  }\n\n  async CheckMaterial(name) {\n    let account = await this.checkIfWalletIsConnected();\n    let result = await this.contract.methods.checkMaterial(this.utils.asciiToHex(name)).call({\n      from: account\n    });\n    return result;\n  }\n\n  async GetMaterialsName() {\n    let account = await this.checkIfWalletIsConnected();\n    let result = await this.contract.methods.getMaterialsName().call({\n      from: account\n    });\n    result.forEach(element => {\n      console.log(this.utils.toUtf8(element));\n    });\n  }\n\n}","map":{"version":3,"sources":["C:/Users/giova/OneDrive/Desktop/Desk/tirocinio/prova/frontEnd/src/SmartContracts/OnBoarding/OnBoarding.js"],"names":["Web3Istance","OnBoardingABI","ethers","OnBoarding","constructor","ABIScheduling","abi","ContractNetworks","networks","contractAddress","Object","keys","length","address","contract","web3","eth","Contract","addPrinter","printerInfo","account","checkIfWalletIsConnected","methods","utils","fromAscii","name","materiale","parseInt","nozzles","printTemp","BedTemp","volume","soluble","FoodSafety","send","from","gas","getPrinters","result","getMakerPrinters","call","console","log","RemovePrinter","index","getPrinter","getMakerPrinter","addMaterial","material","addMaterials","asciiToHex","colors","quantityKG","bedTemp","ModifyPrinter","printerData","printer","Soluble","foodSafety","mountedNozzles","updateMaterial","type","color","removeMaterial","toUtf8","mountMaterial","res","getMaterials","getMaterial","CheckMaterial","checkMaterial","GetMaterialsName","getMaterialsName","forEach","element"],"mappings":"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","sourcesContent":["import Web3Istance from \"../Web3\";\r\nimport OnBoardingABI from '../../ABIs/OnBoarding.json'\r\nimport { ethers } from \"ethers\";\r\n\r\nexport default class OnBoarding extends Web3Istance{\r\n    constructor(){\r\n        super();\r\n        let ABIScheduling = OnBoardingABI.abi;\r\n        let ContractNetworks = OnBoardingABI.networks;\r\n        let contractAddress=ContractNetworks[Object.keys(ContractNetworks)[Object.keys(ContractNetworks).length - 1]].address;\r\n        this.contract=new this.web3.eth.Contract(ABIScheduling,contractAddress);\r\n        //console.log(`Indirizzo Contratto ----- `+ contractAddress);  \r\n        }\r\n    \r\n//address,name,materialSupported,nozzles,mountedNozzles,printTemp,bedTemp,volume,soluble,foodSafety\r\n        async addPrinter(printerInfo){\r\n            let account=await this.checkIfWalletIsConnected();\r\n            await this.contract.methods.addPrinter(\r\n                printerInfo.address,\r\n                this.utils.fromAscii(printerInfo.name),\r\n                printerInfo.materiale,\r\n                [0,1,2], \r\n                parseInt(printerInfo.nozzles),\r\n                parseInt(printerInfo.printTemp),\r\n                parseInt(printerInfo.BedTemp),\r\n                parseInt(printerInfo.volume),\r\n                printerInfo.soluble,\r\n                printerInfo.FoodSafety).send({from:account,gas:4600000}) \r\n        }\r\n\r\n        async getPrinters(){\r\n            let account = await this.checkIfWalletIsConnected();\r\n            let result=await this.contract.methods.getMakerPrinters().call({from:account});\r\n           console.log(account)\r\n           console.log(result)\r\n            return result;\r\n        }\r\n        \r\n        async RemovePrinter(index){\r\n            let account = await this.checkIfWalletIsConnected();\r\n            await this.contract.methods.RemovePrinter(index).send({from:account})\r\n        }\r\n\r\n        async getPrinter(index){\r\n            let account = await this.checkIfWalletIsConnected();\r\n            let result = await this.contract.methods.getMakerPrinter(index).call({from:account});\r\n            return result;\r\n        }\r\n\r\n        async addMaterial(material){\r\n            let account = await this.checkIfWalletIsConnected();\r\n            console.log(account)\r\n\r\n           let result = await this.contract.methods.addMaterials(\r\n                this.utils.asciiToHex(material.name),\r\n                material.materiale,\r\n                material.colors,\r\n                material.quantityKG,\r\n                material.printTemp,\r\n                material.bedTemp).send({from:account,gas:4600000});\r\n                console.log(result)\r\n           }\r\n\r\n        async ModifyPrinter(index,printerData){\r\n            let account = await this.checkIfWalletIsConnected();\r\n            let printer =await this.contract.methods.ModifyPrinter(index,\r\n                printerData.Soluble,\r\n                printerData.foodSafety,\r\n                parseInt(printerData.mountedNozzles),\r\n                ).send({from:account});\r\n            return printer;\r\n        }\r\n\r\n        async updateMaterial(name, type, color, quantityKG, printTemp,bedTemp){\r\n            let account = await this.checkIfWalletIsConnected();\r\n            await this.contract.methods.updateMaterial(this.utils.asciiToHex(name), type, color, quantityKG, printTemp,bedTemp).send({from:account});\r\n\r\n        }\r\n\r\n        async removeMaterial(name, type){\r\n            let account = await this.checkIfWalletIsConnected();\r\n            console.log(this.utils.toUtf8(name))\r\n            await this.contract.methods.removeMaterial(name,type).send({from:account,gas:4600000})\r\n        }\r\n\r\n        async mountMaterial(name, type, printer){\r\n            let account = await this.checkIfWalletIsConnected();\r\n            let res = await this.contract.methods.mountMaterial(\r\n                this.web3.utils.fromAscii(name),\r\n                type,\r\n                printer).send({from:account,gas:4600000});\r\n                console.log(res)\r\n                return res;\r\n        }\r\n\r\n        async getMaterials(){\r\n            let account = await this.checkIfWalletIsConnected();\r\n            let result = await this.contract.methods.getMaterials().call({from:account});\r\n           console.log(account)\r\n           console.log(result)\r\n            return result;\r\n        }\r\n\r\n        async getMaterial(name,type){\r\n            let account = await this.checkIfWalletIsConnected();\r\n            let result = await this.contract.methods.getMaterial(\r\n                name,\r\n                type\r\n            ).call({from:account});\r\n            return result;\r\n\r\n        }\r\n\r\n        async CheckMaterial(name){\r\n            let account = await this.checkIfWalletIsConnected();\r\n            let result =  await this.contract.methods.checkMaterial(this.utils.asciiToHex(name)).call({from:account});\r\n\r\n            return result\r\n        }\r\n\r\n        async GetMaterialsName(){\r\n            let account = await this.checkIfWalletIsConnected();\r\n            let result = await this.contract.methods.getMaterialsName().call({from:account})\r\n            result.forEach(element => {\r\n                console.log(this.utils.toUtf8(element))\r\n            });\r\n        }\r\n\r\n}"]},"metadata":{},"sourceType":"module"}