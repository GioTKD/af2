{"ast":null,"code":"import Web3Istance from \"../Web3\";\nimport OnBoardingABI from '../../ABIs/OnBoarding.json';\nexport default class OnBoarding extends Web3Istance {\n  constructor() {\n    super();\n    let ABIScheduling = OnBoardingABI.abi;\n    let ContractNetworks = OnBoardingABI.networks;\n    let contractAddress = ContractNetworks[Object.keys(ContractNetworks)[Object.keys(ContractNetworks).length - 1]].address;\n    this.contract = new this.web3.eth.Contract(ABIScheduling, contractAddress); //console.log(`Indirizzo Contratto ----- `+ contractAddress);  \n  } //address,name,materialSupported,nozzles,mountedNozzles,printTemp,bedTemp,volume,soluble,foodSafety\n\n\n  async addPrinter(printerInfo) {\n    let account = await this.checkIfWalletIsConnected();\n    console.log(\"qua\");\n    console.log(printerInfo[\"address\"]);\n    await this.contract.methods.addPrinter(printerInfo.address, this.utils.fromAscii(printerInfo.name), printerInfo.materiale, [0, 1, 2], parseInt(printerInfo.nozzles), parseInt(printerInfo.printTemp), parseInt(printerInfo.BedTemp), parseInt(printerInfo.volume), printerInfo.soluble, printerInfo.FoodSafety).send({\n      from: account,\n      gas: 4600000\n    });\n  }\n\n  async getPrinters() {\n    let account = await this.checkIfWalletIsConnected();\n    let result = await this.contract.methods.getMakerPrinters().call({\n      from: account\n    });\n    console.log(account);\n    /*let gianpiero = []\r\n    result.map( (value,key)=>{\r\n        if(key == \"lenght\") return\r\n        else{\r\n            gianpiero.push(value);\r\n        }\r\n     })       \r\n    console.log(gianpiero)*/\n\n    return result;\n  }\n\n  async getPrinter(index) {\n    let account = await this.checkIfWalletIsConnected();\n    let result = await this.contract.methods.getMakerPrinter(index).call({\n      from: account\n    });\n    console.log(\"onboard\");\n    return result;\n  }\n\n  async addMaterial(material) {\n    let account = await this.checkIfWalletIsConnected();\n    console.log(account);\n    let result = await this.contract.methods.addMaterials(this.utils.asciiToHex(\"ciaone\"), [1], [3], 20, 30, 40).send({\n      from: account,\n      gas: 4600000\n    });\n    console.log(result);\n  }\n\n  async updateMaterial(name, type, color, quantityKG, printTemp, bedTemp) {\n    let account = await this.checkIfWalletIsConnected();\n    await this.contract.methods.updateMaterial(name, type, color, quantityKG, printTemp, bedTemp).send({\n      from: account\n    });\n  }\n\n  async removeMaterial(name, type) {\n    let account = await this.checkIfWalletIsConnected();\n    await this.contract.methods.removeMaterial(name, type).send({\n      from: account\n    });\n  }\n\n  async mountMaterial(name, type, printer) {\n    let account = await this.checkIfWalletIsConnected();\n    await this.contract.methods.mountMaterial(name, type, printer).send({\n      from: account\n    });\n  }\n\n  async getMaterials() {\n    let account = await this.checkIfWalletIsConnected();\n    let result = await this.contract.methods.getMaterials().get({\n      from: account\n    });\n    console.log(account);\n    return result;\n  }\n\n}","map":{"version":3,"sources":["C:/Users/giova/OneDrive/Desktop/tirocinio/prova/frontEnd/src/SmartContracts/OnBoarding/OnBoarding.js"],"names":["Web3Istance","OnBoardingABI","OnBoarding","constructor","ABIScheduling","abi","ContractNetworks","networks","contractAddress","Object","keys","length","address","contract","web3","eth","Contract","addPrinter","printerInfo","account","checkIfWalletIsConnected","console","log","methods","utils","fromAscii","name","materiale","parseInt","nozzles","printTemp","BedTemp","volume","soluble","FoodSafety","send","from","gas","getPrinters","result","getMakerPrinters","call","getPrinter","index","getMakerPrinter","addMaterial","material","addMaterials","asciiToHex","updateMaterial","type","color","quantityKG","bedTemp","removeMaterial","mountMaterial","printer","getMaterials","get"],"mappings":"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","sourcesContent":["import Web3Istance from \"../Web3\";\r\nimport OnBoardingABI from '../../ABIs/OnBoarding.json'\r\n\r\nexport default class OnBoarding extends Web3Istance{\r\n    constructor(){\r\n        super();\r\n        let ABIScheduling = OnBoardingABI.abi;\r\n        let ContractNetworks = OnBoardingABI.networks;\r\n        let contractAddress=ContractNetworks[Object.keys(ContractNetworks)[Object.keys(ContractNetworks).length - 1]].address;\r\n        this.contract=new this.web3.eth.Contract(ABIScheduling,contractAddress);\r\n        //console.log(`Indirizzo Contratto ----- `+ contractAddress);  \r\n        }\r\n    \r\n//address,name,materialSupported,nozzles,mountedNozzles,printTemp,bedTemp,volume,soluble,foodSafety\r\n        async addPrinter(printerInfo){\r\n            let account=await this.checkIfWalletIsConnected();\r\n            console.log(\"qua\")\r\n            console.log(printerInfo[\"address\"]);\r\n            await this.contract.methods.addPrinter(\r\n                printerInfo.address,\r\n                this.utils.fromAscii(printerInfo.name),\r\n                printerInfo.materiale,\r\n                [0,1,2], \r\n                parseInt(printerInfo.nozzles),\r\n                parseInt(printerInfo.printTemp),\r\n                parseInt(printerInfo.BedTemp),\r\n                parseInt(printerInfo.volume),\r\n                printerInfo.soluble,\r\n                printerInfo.FoodSafety).send({from:account,gas:4600000}) \r\n        }\r\n\r\n        async getPrinters(){\r\n            let account = await this.checkIfWalletIsConnected();\r\n            let result=await this.contract.methods.getMakerPrinters().call({from:account});\r\n           console.log(account)\r\n            /*let gianpiero = []\r\n            result.map( (value,key)=>{\r\n                if(key == \"lenght\") return\r\n                else{\r\n                    gianpiero.push(value);\r\n                }\r\n             })       \r\n            console.log(gianpiero)*/\r\n            return result;\r\n        }\r\n\r\n        async getPrinter(index){\r\n            let account = await this.checkIfWalletIsConnected();\r\n            let result = await this.contract.methods.getMakerPrinter(index).call({from:account});\r\n            console.log(\"onboard\")\r\n            return result;\r\n        }\r\n\r\n        async addMaterial(material){\r\n            let account = await this.checkIfWalletIsConnected();\r\n            console.log(account)\r\n            let result = await this.contract.methods.addMaterials(\r\n                this.utils.asciiToHex(\"ciaone\"),\r\n                [1],\r\n                [3],\r\n                20,\r\n                30,\r\n                40).send({from:account,gas:4600000});\r\n                console.log(result)\r\n\r\n        }\r\n\r\n        async updateMaterial(name, type, color, quantityKG, printTemp,bedTemp){\r\n            let account = await this.checkIfWalletIsConnected();\r\n            await this.contract.methods.updateMaterial(name, type, color, quantityKG, printTemp,bedTemp).send({from:account});\r\n\r\n        }\r\n\r\n        async removeMaterial(name, type){\r\n            let account = await this.checkIfWalletIsConnected();\r\n            await this.contract.methods.removeMaterial(name,type).send({from:account})\r\n        }\r\n\r\n        async mountMaterial(name, type, printer){\r\n            let account = await this.checkIfWalletIsConnected();\r\n            await this.contract.methods.mountMaterial(name, type, printer).send({from:account})\r\n        }\r\n\r\n        async getMaterials(){\r\n            let account = await this.checkIfWalletIsConnected();\r\n            let result=await this.contract.methods.getMaterials().get({from:account});\r\n           console.log(account)\r\n            return result;\r\n        }\r\n\r\n}"]},"metadata":{},"sourceType":"module"}