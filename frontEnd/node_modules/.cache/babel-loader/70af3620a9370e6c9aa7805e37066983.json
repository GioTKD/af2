{"ast":null,"code":"import Web3Istance from \"../Web3\";\nimport OnBoardingABI from '../../ABIs/OnBoarding.json';\nexport default class OnBoarding extends Web3Istance {\n  constructor() {\n    super();\n    let ABIScheduling = OnBoardingABI.abi;\n    let ContractNetworks = OnBoardingABI.networks;\n    let contractAddress = ContractNetworks[Object.keys(ContractNetworks)[Object.keys(ContractNetworks).length - 1]].address;\n    this.contract = new this.web3.eth.Contract(ABIScheduling, contractAddress); //console.log(`Indirizzo Contratto ----- `+ contractAddress);  \n  } //address,name,materialSupported,nozzles,mountedNozzles,printTemp,bedTemp,volume,soluble,foodSafety\n\n\n  async addPrinter(printerInfo) {\n    let account = await this.checkIfWalletIsConnected();\n    console.log(\"qua\");\n    console.log(printerInfo[\"address\"]);\n    await this.contract.methods.addPrinter(printerInfo.address, this.utils.fromAscii(printerInfo.name), printerInfo.materiale, [0, 1, 2], parseInt(printerInfo.nozzles), parseInt(printerInfo.printTemp), parseInt(printerInfo.BedTemp), parseInt(printerInfo.volume), printerInfo.soluble, printerInfo.FoodSafety).send({\n      from: account,\n      gas: 4600000\n    });\n  }\n\n  async getPrinters() {\n    let account = await this.checkIfWalletIsConnected();\n    let result = await this.contract.methods.getMakerPrinters().call({\n      from: account\n    });\n    console.log(account);\n    return result;\n  }\n\n  async RemovePrinter(index) {\n    let account = await this.checkIfWalletIsConnected();\n    await this.contract.methods.RemovePrinter(index).send({\n      from: account\n    });\n  }\n\n  async getPrinter(index) {\n    let account = await this.checkIfWalletIsConnected();\n    let result = await this.contract.methods.getMakerPrinter(index).call({\n      from: account\n    });\n    console.log(\"onboard\");\n    return result;\n  }\n\n  async addMaterial(material) {\n    let account = await this.checkIfWalletIsConnected();\n    console.log(account);\n    let result = await this.contract.methods.addMaterials(this.utils.asciiToHex(material.name), material.materiale, material.colors, material.quantityKG, material.printTemp, material.bedTemp).send({\n      from: account,\n      gas: 4600000\n    });\n    console.log(result);\n  }\n\n  async updateMaterial(name, type, color, quantityKG, printTemp, bedTemp) {\n    let account = await this.checkIfWalletIsConnected();\n    await this.contract.methods.updateMaterial(this.utils.asciiToHex(name), type, color, quantityKG, printTemp, bedTemp).send({\n      from: account\n    });\n  }\n\n  async removeMaterial(name, type, index) {\n    let account = await this.checkIfWalletIsConnected();\n    await this.contract.methods.removeMaterial(name, type, index).send({\n      from: account,\n      gas: 4600000\n    });\n  }\n\n  async mountMaterial(name, type, printer) {\n    let account = await this.checkIfWalletIsConnected();\n    await this.contract.methods.mountMaterial(name, type, printer).send({\n      from: account\n    });\n  }\n\n  async getMaterials() {\n    let account = await this.checkIfWalletIsConnected();\n    let result = await this.contract.methods.getMaterials().call({\n      from: account\n    });\n    console.log(account);\n    console.log(result);\n    return result;\n  }\n\n  async CheckMaterial(name) {\n    let account = await this.checkIfWalletIsConnected();\n    let result = await this.contract.methods.checkMaterial(this.utils.asciiToHex(name)).call({\n      from: account\n    });\n    return result;\n  }\n\n}","map":{"version":3,"sources":["C:/Users/giova/OneDrive/Desktop/Desk/tirocinio/prova/frontEnd/src/SmartContracts/OnBoarding/OnBoarding.js"],"names":["Web3Istance","OnBoardingABI","OnBoarding","constructor","ABIScheduling","abi","ContractNetworks","networks","contractAddress","Object","keys","length","address","contract","web3","eth","Contract","addPrinter","printerInfo","account","checkIfWalletIsConnected","console","log","methods","utils","fromAscii","name","materiale","parseInt","nozzles","printTemp","BedTemp","volume","soluble","FoodSafety","send","from","gas","getPrinters","result","getMakerPrinters","call","RemovePrinter","index","getPrinter","getMakerPrinter","addMaterial","material","addMaterials","asciiToHex","colors","quantityKG","bedTemp","updateMaterial","type","color","removeMaterial","mountMaterial","printer","getMaterials","CheckMaterial","checkMaterial"],"mappings":"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","sourcesContent":["import Web3Istance from \"../Web3\";\r\nimport OnBoardingABI from '../../ABIs/OnBoarding.json'\r\n\r\nexport default class OnBoarding extends Web3Istance{\r\n    constructor(){\r\n        super();\r\n        let ABIScheduling = OnBoardingABI.abi;\r\n        let ContractNetworks = OnBoardingABI.networks;\r\n        let contractAddress=ContractNetworks[Object.keys(ContractNetworks)[Object.keys(ContractNetworks).length - 1]].address;\r\n        this.contract=new this.web3.eth.Contract(ABIScheduling,contractAddress);\r\n        //console.log(`Indirizzo Contratto ----- `+ contractAddress);  \r\n        }\r\n    \r\n//address,name,materialSupported,nozzles,mountedNozzles,printTemp,bedTemp,volume,soluble,foodSafety\r\n        async addPrinter(printerInfo){\r\n            let account=await this.checkIfWalletIsConnected();\r\n            console.log(\"qua\")\r\n            console.log(printerInfo[\"address\"]);\r\n            await this.contract.methods.addPrinter(\r\n                printerInfo.address,\r\n                this.utils.fromAscii(printerInfo.name),\r\n                printerInfo.materiale,\r\n                [0,1,2], \r\n                parseInt(printerInfo.nozzles),\r\n                parseInt(printerInfo.printTemp),\r\n                parseInt(printerInfo.BedTemp),\r\n                parseInt(printerInfo.volume),\r\n                printerInfo.soluble,\r\n                printerInfo.FoodSafety).send({from:account,gas:4600000}) \r\n        }\r\n\r\n        async getPrinters(){\r\n            let account = await this.checkIfWalletIsConnected();\r\n            let result=await this.contract.methods.getMakerPrinters().call({from:account});\r\n           console.log(account)\r\n            return result;\r\n        }\r\n        \r\n        async RemovePrinter(index){\r\n            let account = await this.checkIfWalletIsConnected();\r\n            await this.contract.methods.RemovePrinter(index).send({from:account})\r\n        }\r\n\r\n        async getPrinter(index){\r\n            let account = await this.checkIfWalletIsConnected();\r\n            let result = await this.contract.methods.getMakerPrinter(index).call({from:account});\r\n            console.log(\"onboard\")\r\n            return result;\r\n        }\r\n\r\n        async addMaterial(material){\r\n            let account = await this.checkIfWalletIsConnected();\r\n            console.log(account)\r\n\r\n           let result = await this.contract.methods.addMaterials(\r\n                this.utils.asciiToHex(material.name),\r\n                material.materiale,\r\n                material.colors,\r\n                material.quantityKG,\r\n                material.printTemp,\r\n                material.bedTemp).send({from:account,gas:4600000});\r\n                console.log(result)\r\n           }\r\n\r\n        async updateMaterial(name, type, color, quantityKG, printTemp,bedTemp){\r\n            let account = await this.checkIfWalletIsConnected();\r\n            await this.contract.methods.updateMaterial(this.utils.asciiToHex(name), type, color, quantityKG, printTemp,bedTemp).send({from:account});\r\n\r\n        }\r\n\r\n        async removeMaterial(name, type,index){\r\n            let account = await this.checkIfWalletIsConnected();\r\n            await this.contract.methods.removeMaterial(name,type,index).send({from:account,gas:4600000})\r\n        }\r\n\r\n        async mountMaterial(name, type, printer){\r\n            let account = await this.checkIfWalletIsConnected();\r\n            await this.contract.methods.mountMaterial(name, type, printer).send({from:account})\r\n        }\r\n\r\n        async getMaterials(){\r\n            let account = await this.checkIfWalletIsConnected();\r\n            let result = await this.contract.methods.getMaterials().call({from:account});\r\n           console.log(account)\r\n           console.log(result)\r\n            return result;\r\n        }\r\n\r\n        async CheckMaterial(name){\r\n            let account = await this.checkIfWalletIsConnected();\r\n            let result =  await this.contract.methods.checkMaterial(this.utils.asciiToHex(name)).call({from:account});\r\n\r\n            return result\r\n        }\r\n\r\n}"]},"metadata":{},"sourceType":"module"}