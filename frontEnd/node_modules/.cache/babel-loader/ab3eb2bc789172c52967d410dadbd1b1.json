{"ast":null,"code":"import Web3Istance from \"../Web3\";\nimport VotingSystemABI from '../../ABIs/VotingSystem.json';\nimport { useEffect } from \"react\";\nexport default class VotingSystem extends Web3Istance {\n  constructor() {\n    super();\n    let ABIScheduling = VotingSystemABI.abi;\n    let ContractNetworks = VotingSystemABI.networks;\n    let contractAddress = ContractNetworks[Object.keys(ContractNetworks)[Object.keys(ContractNetworks).length - 1]].address;\n    this.contract = new this.web3.eth.Contract(ABIScheduling, contractAddress); // console.log(this.contract)\n    //console.log(`Indirizzo Contratto----- `+ contractAddress)\n  }\n\n  async announce(Design) {\n    let account = await this.checkIfWalletIsConnected();\n    console.log(account);\n    let result = await this.contract.methods.announce(this.utils.fromAscii(Design.filehash), Design.timestamp, Design.commitment, Design.taur, Design.taup).send({\n      from: account,\n      gas: 4600000\n    });\n  }\n\n  async getDesigns() {\n    let account = await this.checkIfWalletIsConnected();\n    let result = this.contract.methods.getDesigns().call({\n      from: account\n    });\n    console.log(result);\n  }\n\n  async getNumDesignes() {\n    let account = await this.checkIfWalletIsConnected();\n    let result = await this.contract.methods.getNumDesignes().call({\n      from: account\n    });\n    console.log(result);\n    return result;\n  }\n\n  async getDesigne(index) {\n    let account = await this.checkIfWalletIsConnected();\n    console.log(account);\n    let result = await this.contract.methods.getDesigne(index).call({\n      from: account\n    });\n    return result;\n  }\n\n  async getDesignes() {\n    let account = await this.checkIfWalletIsConnected();\n    let result = await this.contract.methods.getDesignes().call({\n      from: account\n    });\n    console.log(result);\n    return result;\n  }\n\n}","map":{"version":3,"sources":["C:/Users/giova/OneDrive/Desktop/Desk/tirocinio/prova/frontEnd/src/SmartContracts/VotingSystem/VotingSystem.js"],"names":["Web3Istance","VotingSystemABI","useEffect","VotingSystem","constructor","ABIScheduling","abi","ContractNetworks","networks","contractAddress","Object","keys","length","address","contract","web3","eth","Contract","announce","Design","account","checkIfWalletIsConnected","console","log","result","methods","utils","fromAscii","filehash","timestamp","commitment","taur","taup","send","from","gas","getDesigns","call","getNumDesignes","getDesigne","index","getDesignes"],"mappings":"AAAA,OAAOA,WAAP,MAAwB,SAAxB;AACA,OAAOC,eAAP,MAA4B,8BAA5B;AACA,SAASC,SAAT,QAA0B,OAA1B;AAEA,eAAe,MAAMC,YAAN,SAA2BH,WAA3B,CAAsC;AACjDI,EAAAA,WAAW,GAAE;AACT;AACA,QAAIC,aAAa,GAAGJ,eAAe,CAACK,GAApC;AACA,QAAIC,gBAAgB,GAAGN,eAAe,CAACO,QAAvC;AACA,QAAIC,eAAe,GAAGF,gBAAgB,CAACG,MAAM,CAACC,IAAP,CAAYJ,gBAAZ,EAA8BG,MAAM,CAACC,IAAP,CAAYJ,gBAAZ,EAA8BK,MAA9B,GAAqC,CAAnE,CAAD,CAAhB,CAAwFC,OAA9G;AACA,SAAKC,QAAL,GAAgB,IAAI,KAAKC,IAAL,CAAUC,GAAV,CAAcC,QAAlB,CAA2BZ,aAA3B,EAAyCI,eAAzC,CAAhB,CALS,CAMV;AACC;AACH;;AAEa,QAARS,QAAQ,CAACC,MAAD,EAAQ;AAClB,QAAIC,OAAO,GAAC,MAAM,KAAKC,wBAAL,EAAlB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYH,OAAZ;AACA,QAAII,MAAM,GAAG,MAAM,KAAKV,QAAL,CAAcW,OAAd,CAAsBP,QAAtB,CACf,KAAKQ,KAAL,CAAWC,SAAX,CAAqBR,MAAM,CAACS,QAA5B,CADe,EAEfT,MAAM,CAACU,SAFQ,EAGfV,MAAM,CAACW,UAHQ,EAIfX,MAAM,CAACY,IAJQ,EAKfZ,MAAM,CAACa,IALQ,EAKFC,IALE,CAKG;AAACC,MAAAA,IAAI,EAACd,OAAN;AAAce,MAAAA,GAAG,EAAC;AAAlB,KALH,CAAnB;AAMH;;AAEe,QAAVC,UAAU,GAAE;AACd,QAAIhB,OAAO,GAAG,MAAM,KAAKC,wBAAL,EAApB;AACA,QAAIG,MAAM,GAAG,KAAKV,QAAL,CAAcW,OAAd,CAAsBW,UAAtB,GAAmCC,IAAnC,CAAwC;AAACH,MAAAA,IAAI,EAACd;AAAN,KAAxC,CAAb;AACAE,IAAAA,OAAO,CAACC,GAAR,CAAYC,MAAZ;AACH;;AAEmB,QAAdc,cAAc,GAAE;AAClB,QAAIlB,OAAO,GAAG,MAAM,KAAKC,wBAAL,EAApB;AACA,QAAIG,MAAM,GAAG,MAAM,KAAKV,QAAL,CAAcW,OAAd,CAAsBa,cAAtB,GAAuCD,IAAvC,CAA4C;AAACH,MAAAA,IAAI,EAACd;AAAN,KAA5C,CAAnB;AACAE,IAAAA,OAAO,CAACC,GAAR,CAAYC,MAAZ;AACA,WAAOA,MAAP;AACH;;AAEe,QAAVe,UAAU,CAACC,KAAD,EAAO;AACnB,QAAIpB,OAAO,GAAG,MAAM,KAAKC,wBAAL,EAApB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYH,OAAZ;AACA,QAAII,MAAM,GAAG,MAAM,KAAKV,QAAL,CAAcW,OAAd,CAAsBc,UAAtB,CAAiCC,KAAjC,EAAwCH,IAAxC,CAA6C;AAACH,MAAAA,IAAI,EAACd;AAAN,KAA7C,CAAnB;AACA,WAAOI,MAAP;AACH;;AAEgB,QAAXiB,WAAW,GAAE;AACf,QAAIrB,OAAO,GAAG,MAAM,KAAKC,wBAAL,EAApB;AACA,QAAIG,MAAM,GAAG,MAAM,KAAKV,QAAL,CAAcW,OAAd,CAAsBgB,WAAtB,GAAoCJ,IAApC,CAAyC;AAACH,MAAAA,IAAI,EAACd;AAAN,KAAzC,CAAnB;AACAE,IAAAA,OAAO,CAACC,GAAR,CAAYC,MAAZ;AACA,WAAOA,MAAP;AACH;;AA/CgD","sourcesContent":["import Web3Istance from \"../Web3\";\r\nimport VotingSystemABI from '../../ABIs/VotingSystem.json'\r\nimport { useEffect } from \"react\";\r\n\r\nexport default class VotingSystem extends Web3Istance{\r\n    constructor(){\r\n        super();\r\n        let ABIScheduling = VotingSystemABI.abi;\r\n        let ContractNetworks = VotingSystemABI.networks;\r\n        let contractAddress = ContractNetworks[Object.keys(ContractNetworks)[Object.keys(ContractNetworks).length-1]].address;\r\n        this.contract = new this.web3.eth.Contract(ABIScheduling,contractAddress);\r\n       // console.log(this.contract)\r\n        //console.log(`Indirizzo Contratto----- `+ contractAddress)\r\n    }\r\n\r\n    async announce(Design){\r\n        let account=await this.checkIfWalletIsConnected();\r\n        console.log(account)\r\n        let result = await this.contract.methods.announce(\r\n            this.utils.fromAscii(Design.filehash),\r\n            Design.timestamp,\r\n            Design.commitment,\r\n            Design.taur,\r\n            Design.taup).send({from:account,gas:4600000})\r\n    }\r\n\r\n    async getDesigns(){\r\n        let account = await this.checkIfWalletIsConnected();\r\n        let result = this.contract.methods.getDesigns().call({from:account});\r\n        console.log(result)\r\n    }\r\n\r\n    async getNumDesignes(){\r\n        let account = await this.checkIfWalletIsConnected();\r\n        let result = await this.contract.methods.getNumDesignes().call({from:account});\r\n        console.log(result)\r\n        return result;\r\n    }\r\n\r\n    async getDesigne(index){\r\n        let account = await this.checkIfWalletIsConnected();\r\n        console.log(account)\r\n        let result = await this.contract.methods.getDesigne(index).call({from:account});\r\n        return result;\r\n    }\r\n\r\n    async getDesignes(){\r\n        let account = await this.checkIfWalletIsConnected();\r\n        let result = await this.contract.methods.getDesignes().call({from:account});\r\n        console.log(result);\r\n        return result;\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}