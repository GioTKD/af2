{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\giova\\\\OneDrive\\\\Desktop\\\\Desk\\\\tirocinio\\\\prova\\\\frontEnd\\\\src\\\\component\\\\WalletCheck\\\\WalletConnected.js\",\n    _s = $RefreshSig$();\n\nimport { useWeb3React } from '@web3-react/core';\nimport { InjectedConnector } from '@web3-react/injected-connector';\nimport { useState, useEffect } from 'react';\nimport { Navigate } from \"react-router-dom\"; //import User from '../../SmartContracts/Users/Users';\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const injected = new InjectedConnector({\n  supportedChainIds: [1, 3, 4, 5, 42, 56, 97, 1337]\n});\nexport default function WalletConnected(_ref) {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const {\n    active: networkActive,\n    error: networkError,\n    activate: activateNetwork\n  } = useWeb3React();\n  const [loaded, setLoaded] = useState(false); //const user=new User();\n  //const [isUser,setIsUser]=useState(false)\n\n  const [wait, setWait] = useState(false);\n  /*const player=async()=>{\r\n    setIsUser(await user.isUser());\r\n    console.log(isUser);\r\n    return isUser;\r\n  }*/\n\n  const finish = () => {\n    setWait(true);\n  };\n\n  useEffect(() => {\n    injected.isAuthorized().then(isAuthorized => {\n      setLoaded(true);\n\n      if (isAuthorized && !networkActive && !networkError) {\n        activateNetwork(injected);\n      }\n    }).catch(() => {\n      setLoaded(true);\n    });\n    setTimeout(() => finish(), 500);\n  }, [activateNetwork, networkActive, networkError]);\n\n  if (loaded && wait) {\n    if (networkActive === true) {\n      return children;\n    } else if (!networkActive) {\n      return /*#__PURE__*/_jsxDEV(Navigate, {\n        to: \"/login\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 14\n      }, this);\n    }\n  } else return /*#__PURE__*/_jsxDEV(\"span\", {\n    children: \"Loading\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 14\n  }, this);\n} //Versione scarsa\n\n/*useEffect(()=>{\r\n  const accountCheck=async()=>{\r\n    let user=new User();\r\n    \r\n    const {ethereum}=window;\r\n    account =await ethereum.request({ method: 'eth_accounts' })\r\n      .then((res)=>{\r\n        if(res.length>0){\r\n          \r\n          \r\n          setLoaded(true)\r\n          setNetwork(true)\r\n        }\r\n            \r\n              else {\r\n                setLoaded(true);\r\n              }\r\n              })\r\n            .catch(()=>{setLoaded(true)})\r\n          };\r\n  accountCheck();\r\n},[loaded])\r\n\r\n      if(loaded && network){\r\n  console.log(\"ok\");\r\n  return (children);}\r\nelse if(loaded && !network){\r\n  console.log(\"no ok\");\r\n return  <Navigate to=\"/login\"></Navigate>\r\n}\r\nelse return (<span>Loading</span>)\r\n*/\n\n_s(WalletConnected, \"y46J2OTq+S73xS3ieHIA15/SQd4=\", false, function () {\n  return [useWeb3React];\n});\n\n_c = WalletConnected;\n\nvar _c;\n\n$RefreshReg$(_c, \"WalletConnected\");","map":{"version":3,"sources":["C:/Users/giova/OneDrive/Desktop/Desk/tirocinio/prova/frontEnd/src/component/WalletCheck/WalletConnected.js"],"names":["useWeb3React","InjectedConnector","useState","useEffect","Navigate","injected","supportedChainIds","WalletConnected","children","active","networkActive","error","networkError","activate","activateNetwork","loaded","setLoaded","wait","setWait","finish","isAuthorized","then","catch","setTimeout"],"mappings":";;;AAAA,SAASA,YAAT,QAA6B,kBAA7B;AACA,SAASC,iBAAT,QAAkC,gCAAlC;AACA,SAASC,QAAT,EAAkBC,SAAlB,QAAmC,OAAnC;AACA,SAAQC,QAAR,QAAuB,kBAAvB,C,CACA;;;AAEA,OAAO,MAAMC,QAAQ,GAAG,IAAIJ,iBAAJ,CAAsB;AAAEK,EAAAA,iBAAiB,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,EAAb,EAAiB,EAAjB,EAAqB,EAArB,EAA0B,IAA1B;AAArB,CAAtB,CAAjB;AAEN,eAAe,SAASC,eAAT,OAAsC;AAAA;;AAAA,MAAb;AAAEC,IAAAA;AAAF,GAAa;AACpD,QAAM;AAAEC,IAAAA,MAAM,EAAEC,aAAV;AAAyBC,IAAAA,KAAK,EAAEC,YAAhC;AAA8CC,IAAAA,QAAQ,EAAEC;AAAxD,MAA4Ed,YAAY,EAA9F;AACA,QAAM,CAACe,MAAD,EAASC,SAAT,IAAsBd,QAAQ,CAAC,KAAD,CAApC,CAFoD,CAGpD;AACA;;AACA,QAAM,CAACe,IAAD,EAAMC,OAAN,IAAehB,QAAQ,CAAC,KAAD,CAA7B;AAEA;AACF;AACA;AACA;AACA;;AAEE,QAAMiB,MAAM,GAAC,MAAI;AACfD,IAAAA,OAAO,CAAC,IAAD,CAAP;AACD,GAFD;;AAIAf,EAAAA,SAAS,CAAC,MAAM;AACdE,IAAAA,QAAQ,CACLe,YADH,GAEGC,IAFH,CAESD,YAAD,IAAkB;AACtBJ,MAAAA,SAAS,CAAC,IAAD,CAAT;;AACA,UAAII,YAAY,IAAI,CAACV,aAAjB,IAAkC,CAACE,YAAvC,EAAqD;AACnDE,QAAAA,eAAe,CAACT,QAAD,CAAf;AACD;AACF,KAPH,EAQGiB,KARH,CAQS,MAAM;AACXN,MAAAA,SAAS,CAAC,IAAD,CAAT;AAED,KAXH;AAYEO,IAAAA,UAAU,CAAC,MAAIJ,MAAM,EAAX,EAAc,GAAd,CAAV;AACD,GAdM,EAcJ,CAACL,eAAD,EAAkBJ,aAAlB,EAAiCE,YAAjC,CAdI,CAAT;;AAiBA,MAAGG,MAAM,IAAIE,IAAb,EAAkB;AAChB,QAAGP,aAAa,KAAG,IAAnB,EAA0B;AACxB,aAAOF,QAAP;AACC,KAFH,MAGK,IAAG,CAACE,aAAJ,EAAmB;AACtB,0BAAO,QAAC,QAAD;AAAU,QAAA,EAAE,EAAC;AAAb;AAAA;AAAA;AAAA;AAAA,cAAP;AACD;AACF,GAPD,MAUI,oBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AAKL,C,CAGD;;AACE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;GApFyBH,e;UAC2DP,Y;;;KAD3DO,e","sourcesContent":["import { useWeb3React } from '@web3-react/core'\r\nimport { InjectedConnector } from '@web3-react/injected-connector';\r\nimport { useState,useEffect } from 'react';\r\nimport {Navigate} from \"react-router-dom\";\r\n//import User from '../../SmartContracts/Users/Users';\r\n\r\nexport const injected = new InjectedConnector({ supportedChainIds: [1, 3, 4, 5, 42, 56, 97 , 1337] });\r\n\r\n export default function WalletConnected({ children }){\r\n  const { active: networkActive, error: networkError, activate: activateNetwork } = useWeb3React();\r\n  const [loaded, setLoaded] = useState(false);\r\n  //const user=new User();\r\n  //const [isUser,setIsUser]=useState(false)\r\n  const [wait,setWait]=useState(false)\r\n\r\n  /*const player=async()=>{\r\n    setIsUser(await user.isUser());\r\n    console.log(isUser);\r\n    return isUser;\r\n  }*/\r\n  \r\n  const finish=()=>{\r\n    setWait(true);\r\n  }\r\n\r\n  useEffect(() => {\r\n    injected\r\n      .isAuthorized()\r\n      .then((isAuthorized) => {\r\n        setLoaded(true)\r\n        if (isAuthorized && !networkActive && !networkError) {\r\n          activateNetwork(injected);\r\n        }\r\n      })\r\n      .catch(() => {\r\n        setLoaded(true)\r\n\r\n      });\r\n      setTimeout(()=>finish(),500);\r\n    }, [activateNetwork, networkActive, networkError])\r\n  \r\n  \r\n  if(loaded && wait){\r\n    if(networkActive===true  ){\r\n      return children;\r\n      }\r\n    else if(!networkActive) {\r\n      return <Navigate to='/login'/>\r\n    }\r\n  }\r\n\r\n    else \r\n      return <span>Loading</span>\r\n\r\n  \r\n  \r\n\r\n}\r\n\r\n\r\n//Versione scarsa\r\n  /*useEffect(()=>{\r\n    const accountCheck=async()=>{\r\n      let user=new User();\r\n      \r\n      const {ethereum}=window;\r\n      account =await ethereum.request({ method: 'eth_accounts' })\r\n        .then((res)=>{\r\n          if(res.length>0){\r\n            \r\n            \r\n            setLoaded(true)\r\n            setNetwork(true)\r\n          }\r\n              \r\n                else {\r\n                  setLoaded(true);\r\n                }\r\n                })\r\n              .catch(()=>{setLoaded(true)})\r\n\r\n          };\r\n    accountCheck();\r\n  },[loaded])\r\n  \r\n        if(loaded && network){\r\n    console.log(\"ok\");\r\n    return (children);}\r\n  else if(loaded && !network){\r\n    console.log(\"no ok\");\r\n   return  <Navigate to=\"/login\"></Navigate>\r\n  }\r\n  else return (<span>Loading</span>)\r\n  */"]},"metadata":{},"sourceType":"module"}